# Use an official Ubuntu runtime as a parent image
FROM ubuntu:20.04

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive

# Add ROS repository and key
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \ 
    && rm -rf /var/lib/apt/lists/*

RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -

# Set up ROS repository
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros-latest.list


# Install ROS and initialize rosdep
RUN apt-get update && apt-get install -y \
    ros-noetic-desktop-full \
    python3-rosdep \
    python3-rosinstall \
    python3-rosinstall-generator \
    python3-wstool \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

RUN rosdep init && rosdep update

# Install your additional dependencies here
# For example, if you have another executable, you can install it like this:
# RUN apt-get update && apt-get install -y your-package-name

# Set the ROS environment variables
ENV ROS_DISTRO noetic
ENV ROS_ROOT /opt/ros/$ROS_DISTRO
ENV ROS_PACKAGE_PATH /opt/ros/$ROS_DISTRO/share
ENV ROS_MASTER_URI http://localhost:11311
ENV ROS_IP 127.0.0.1

# Update package list and install necessary dependencies
RUN apt-get update -y && \
    apt-get install -y \
    g++ \
    cmake \
    libcpprest-dev

# Create a directory for your C++ application
WORKDIR /app

# Copy your C++ source code into the container
COPY restTest.cpp /app/
COPY CMakeLists.txt /app/

RUN echo "1"
# Build your C++ application
RUN mkdir build && cd build && cmake .. && make

# Expose the port your application will listen on
EXPOSE 8080

# Start your C++ application when the container starts
CMD ["./build/main"]



# Set the default command to run when the container starts
CMD ["bash", "-c", "source /opt/ros/$ROS_DISTRO/setup.bash && roscore & plotjuggler & ./build/main"]

